name: Neha Creating AWS Resources Using Terraform

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

env:
  tfcode_path: aws-resource/vpc
  AWS_ACCESS_KEY_ID : ${{secrets.AWS_ACCESS_KEY}}
  AWS_SECRET_ACCESS_KEY_ID : ${{secrets.AWS_SECRET_KEY}}
  REGION: "us-east-2"
  BASENAME: "NEHA"
  VPC_CIDR_BLOCK: "10.0.0.0/16"
  NETWORK_PRIVATE_SUBNETS_CIDR1: "10.0.0.0/18"
  NETWORK_PRIVATE_SUBNETS_CIDR2: "10.0.64.0/18"
  NETWORK_PUBLIC_SUBNETS_CIDR1: "10.0.128.0/18"
  NETWORK_PUBLIC_SUBNETS_CIDR2: "10.0.192.0/18"

jobs: 
  build:
    name: Create AWS Infrastructure Using Terraform Cloud

    runs-on: ubuntu-latest

    steps:
    - name: Checkout tf code in runner environment
      uses: actions/checkout@v3.5.2

    # Add the AWS Creds as ENV variable in TF Cloud workspace, since the tf run happens in TF Cloud environment
    - name : Before Script Run
      run: |
        export $AWS_ACCESS_KEY_ID 
        export $AWS_SECRET_ACCESS_KEY_ID
      working-directory: ${{ env.tfcode_path }}

    # Call rest of the Terraform commands
    - name: Terraform init and validate
      run: |
        echo `pwd`
        echo "** Running Terraform Init**"
        terraform init
        echo "** Running Terraform Validate**"
        terraform validate
      working-directory: ${{ env.tfcode_path }}
    - name: Terraform plan
      run: |
        echo `pwd`   
        echo "** Running Terraform Plan**"
        PRIVATE_SUBNETS_CIDR=['"'$NETWORK_PRIVATE_SUBNETS_CIDR1'","'$NETWORK_PRIVATE_SUBNETS_CIDR2'"']
        PUBLIC_SUBNETS_CIDR=['"'$NETWORK_PUBLIC_SUBNETS_CIDR1'","'$NETWORK_PUBLIC_SUBNETS_CIDR2'"']
        AVAILABILITY_ZONES=['"'$REGION'a","'$REGION'b"']
        terraform plan -var="region=$REGION" -var="basename=$BASENAME" -var="azs=$AVAILABILITY_ZONES" -var="vpc_cidr_block=$VPC_CIDR_BLOCK" -var="private_subnet_cidrs=$PRIVATE_SUBNETS_CIDR" -var="public_subnet_cidrs=$PUBLIC_SUBNETS_CIDR"
    - name : Terraform apply
      run: |
        echo 'pwd'
        echo "** Running Terraform Apply**"
        PRIVATE_SUBNETS_CIDR=['"'$NETWORK_PRIVATE_SUBNETS_CIDR1'","'$NETWORK_PRIVATE_SUBNETS_CIDR2'"']
        PUBLIC_SUBNETS_CIDR=['"'$NETWORK_PUBLIC_SUBNETS_CIDR1'","'$NETWORK_PUBLIC_SUBNETS_CIDR2'"']
        AVAILABILITY_ZONES=['"'$REGION'a","'$REGION'b"']
        terraform apply -var="region=$REGION" -var="basename=$BASENAME" -var="azs=$AVAILABILITY_ZONES" -var="vpc_cidr_block=$VPC_CIDR_BLOCK" -var="private_subnet_cidrs=$PRIVATE_SUBNETS_CIDR" -var="public_subnet_cidrs=$PUBLIC_SUBNETS_CIDR" -auto-approve
      working-directory: ${{ env.tfcode_path }}
  
    - name: Terraform Destroy
      run: |
        echo "** Running Terraform Destroy**"
        PRIVATE_SUBNETS_CIDR=['"'$NETWORK_PRIVATE_SUBNETS_CIDR1'","'$NETWORK_PRIVATE_SUBNETS_CIDR2'"']
        PUBLIC_SUBNETS_CIDR=['"'$NETWORK_PUBLIC_SUBNETS_CIDR1'","'$NETWORK_PUBLIC_SUBNETS_CIDR2'"']
        AVAILABILITY_ZONES=['"'$REGION'a","'$REGION'b"']
        terraform destroy -var="region=$REGION" -var="basename=$BASENAME" -var="azs=$AVAILABILITY_ZONES" -var="vpc_cidr_block=$VPC_CIDR_BLOCK" -var="private_subnet_cidrs=$PRIVATE_SUBNETS_CIDR" -var="public_subnet_cidrs=$PUBLIC_SUBNETS_CIDR" -auto-approve
      working-directory: ${{ env.tfcode_path }}
